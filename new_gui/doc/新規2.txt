## 1. 現行プロジェクトの全体像・GUI概要の把握
各種ドキュメント（、、など）から、 本プロジェクトは「配信開始や新着動画投稿を自動検知し、Bluesky へ通知を投稿するボット」です。
主な特徴としては—— `README.md``ARCHITECTURE.ja.md``All-ModuleList.md`
- Twitch, YouTube, ニコニコの配信/動画投稿検知機能
- Blueskyへの自動ポスト
- Cloudflare Tunnel/ngrok/localtunnelを利用したWebhook受信
- 設定やサーバー起動・トンネル管理ができるTkinter製GUI「設定アプリ」
- 設定反映、保存、通知といったユーザインタラクション重視

現行GUIは「設定ファイルエディタ」「状態表示」「サーバー・トンネルの起動/停止管理」などを担っていると推測されます。
## 2. 仕様策定・Flet化へ向けた新GUIの設計計画書
### 2-1. 基本コンセプト
- **分かりやすさ**：初めてのユーザーでも直感的に使える
- **設定ウィザード形式**：ステップ構成で漏れなく設定完了できる
- **リアルタイム状態表示**：配信検知・通知状況やトンネル・サーバー稼働状況を見やすくする
- **安全な操作**：サーバーやサービスの開始・終了の際に誤操作が起こりにくい設計
- **クロスプラットフォーム**：Fletの長所を活かしWindows/Mac/Linuxで同等の体験

### 2-2. 機能一覧
#### A. ウィザード形式の初期セットアップ
- 
    1. 必須情報の入力（APIキー・Webhook情報・配信サービス選択）

- 
    1. Blueskyアカウント設定

- 
    1. 通知テンプレート設定

- 
    1. Webhook受信方法選択（Cloudflare Tunnel, ngrok, localtunnel, カスタム）

- 
    1. 設定内容の最終確認
　 → 完了後 main 画面へ遷移

#### B. メイン管理画面
- 設定ファイル閲覧・編集
- サーバー起動／停止、トンネル起動／停止
- 各種稼働状況表示（サーバー・トンネル・イベント受信ログ等）
- 手動同期・再取得ボタン
- 設定保存・反映とその結果表示（トースト通知）
- プロファイル管理（設定の保存・切替）

#### C. ユーザインタラクションパート
- 成功／失敗時にトーストまたはモーダル表示
- 設定保存・反映時の詳細ログ＆ヒント
- 各種「ヘルプ」や「補足説明」UI

### 2-3. UIワイヤーフレーム案（テキスト）
``` plaintext
■ 初回ウィザード
 +------------------ Setup Wizard ---------------------+
 |　[1/5] 配信サービス・アクセストークン入力              |
 |   [Twitch][YouTube][Niconico]のチェックボックス       |
 |   ID/Token用テキストフィールド                       |
 |   次へ＞                                             |
 +----------------------------------------------------+

■ メイン画面構成
 +---------------- StreamNotifyonBluesky ----------------+
 |    [設定]   [状態表示]   [ログ]   [プロフィール切替]    |
 +-------------------------------------------------------+
 | [設定エディタ]                                        |
 | [保存/反映]   [サーバー起動/停止]   [トンネル起動/停止] |
 +-------------------------------------------------------+
 |      [状態表示パネル]                                 |
 |   例: サーバー[稼働中]  トンネル[停止]                |
 +-------------------------------------------------------+
 |      [イベント受信/通知ログ]                          |
 +-------------------------------------------------------+
```
### 2-4. 各パーツ詳細設計案
#### 1. 設定ウィザード部
- Flet の `StepView`（あるいはパネル切替）で、入力項目ごとに進行
- バリデーション付き
- 完了後は設定ファイルへ自動保存

#### 2. 設定エディタ
- Flet の `DataTable` + テキストエディタ
- 主要パラメータのみシンプルなフォーム、詳細表示で全項目編集

#### 3. サーバー・トンネル管理パネル
- Flet の `Container` + ON/OFFスイッチ風ボタン
- 起動中はグリーン、停止時はグレー
- 状態変化をアニメーションまたは明示的なテキストで通知

#### 4. ステータス表示パネル
- サーバー・トンネルの状態、エラー通知を見やすくアイコン化
- ステータスと稼働ログはリアルタイム更新

#### 5. ログ/イベントパネル
- 過去の通知履歴、イベント受信履歴をリスト表示
- 詳細表示やフィルタリングも可能に

#### 6. その他（設定保存・適用トースト、ヘルプダイアログ）
### 2-5. 想定ユーザーシナリオ
- 初回ウィザードで必要項目を埋めて、状況把握しつつ運用開始
- 配信サービス追加や通知テンプレート変更もGUIで簡単反映
- サーバー・トンネルを必要に応じて開始／停止
- 状態や履歴をGUIから容易に確認

## 3. 技術検討・Flet化留意事項
- **既存TkinterロジックのFletラッピング**は、各イベントハンドラ・状態更新を Flet の signal／state 管理にマッピング
- 主要設定ファイルの読み込み／保存アクセサは既存ロジックを流用または呼び出し
- 必要なら設定・ログ保存部分をAPI化し、GUI→APIコール式にも移行可能

# 1. 画面ごとの機能要件・UI設計・Mockup案
## 1-1. 初回セットアップウィザード（Setup Wizard）
**目的**
必要な初期設定（APIキー、サービス、アカウント情報、通知テンプレートなど）を段階的に入力・確認させ、漏れなく設定を完了させる。
### ステップ構成

| ステップ | 入力項目例 |
| --- | --- |
| サービス選択 | [Twitch][YouTube][Niconico] のチェックボックス |
| API情報設定 | 各サービスのAPIキー/トークン入力フィールド |
| Bluesky設定 | Blueskyハンドル・パスワード（またはApp Password）入力 |
| 通知テンプレート | 各種イベントごとの通知テンプレート編集エリア |
| トンネル方式選択 | [Cloudflare][ngrok][localtunnel][カスタム] ラジオボタン |
| 確認・保存 | 入力内容サマリ、完了ボタン |

### UI配置モック（テキスト）
``` plaintext
+------------------- Setup Wizard ----------------------+
| Step 1/5: 使用する配信サービス                     |
| [x] Twitch  [ ] YouTube  [ ] Niconico              |
| 次へ [→]                                              |
+------------------------------------------------------+

+-------------------+
| Step 2/5: API認証情報設定|
| Twitch Client ID: [__________]                     |
| Twitch Secret  : [__________]                      |
| ...                                                 |
| 戻る [←]   次へ [→]                                 |
+-------------------+

...（以降省略）...
```
## 1-2. メイン画面
**目的**
日常運用に必要な各種コントロール・状態視認・編集を集約するハブ。
（設定、ステータス、サーバー起動/停止、トンネル制御、ログ、設定プロファイル切替）
### 主パネル&機能
1. **設定エディタパネル**
    - フォーム形式で主要項目を編集
    - 詳細タブでJSON/YAMLなどの設定情報を直接編集できるテキストエリア

2. **状態表示パネル**
    - サーバー状態（稼働/停止中）
    - トンネル状態（稼働/停止中、方式名表示、外部公開URL表示）
    - バッジ/アイコンで視覚的表示

3. **アクションパネル**
    - サーバー・トンネルの[起動][停止]スイッチ/ボタン
    - 設定反映・保存ボタン
    - 手動リロード、再接続ボタン

4. **通知・ログパネル**
    - 通知履歴リスト（日時・イベント・投稿内容・結果表示）
    - 動的更新、詳細・削除も可

5. **プロファイル管理**
    - 複数プロファイル（設定ファイル）の切替
    - 新規作成・削除ボタン

### ワイヤーフレーム例（テキスト）
``` plaintext
+-------------------- StreamNotifyonBluesky -------------------+
| [設定]  [ステータス]  [ログ]  [プロファイル切替] |
+-------------------------------------------------------------+
| 設定エディタ：                                            |
| [ Twitch ClientID  ][________]                             |
| [ Bluesky Handle   ][________]                             |
| ...                                                       |
| [ 保存・適用 ] [サーバー 起動/停止] [トンネル 起動/停止]   |
+-------------------------------------------------------------+
| 状態表示: サーバー   [● 稼働中] | トンネル [■ 停止中]       |
|               外部URL: https://xxxx.example/                |
+-------------------------------------------------------------+
| 通知ログ/イベント履歴:                                      |
| [2025/05/30 20:33] Twitch: 配信検知→通知済                  |
| [2025/05/30 19:30] YouTube: 新着動画検知→通知失敗           |
| ...                                                        |
+-------------------------------------------------------------+
```
## 1-3. サブ画面／ダイアログ設計
- 設定保存確認・警告モーダル
- エラー/成功トースト通知
- ヘルプ＆チュートリアルパネル
- 詳細エラーログ or 各種フィードバック表示

# 2. 実装工程ごとのスケッチ・設計書
## 2-1. 実装のフェーズ分割

| フェーズ | 作業内容例 |
| --- | --- |
| 1. Fletプロジェクト初期化 | 基本ウィンドウ・ルートUIレイアウト作成 |
| 2. ウィザード機能 | ステップ切替コンポーネント・入力バリデーション |
| 3. 設定エディタ機能 | データバインディング付フォーム、保存処理 |
| 4. サーバー/トンネル制御 | ステータス管理用ストア、起動/停止APIラッパ |
| 5. 状態・ログパネル | ライブアップデート対応リストビュー |
| 6. プロファイル管理 | ファイル選択ダイアログ、切替処理 |
| 7. ユーザインタラクション | トースト通知、各種モーダル実装 |
| 8. 全体テスト & チュートリアル | 操作ハンドラ一元化、テストセッション |

## 2-2. UIパーツ設計（サンプル）
### 設定エディタ主要パーツ

| パーツ名 | コントロール種 | 備考 |
| --- | --- | --- |
| サービス選択 | チェックボックス群 | 動的に増減可能 |
| APIキー/トークン | テキストボックス | フォーカス時プレースホルダ |
| Blueskyハンドル | テキストボックス | パターンバリデーションあり |
| トンネルモード選択 | ラジオボタン | 備考説明・選択肢切替可能 |
| 通知テンプレ編集 | テキストエリア | プレーンテキストまたは変数参照可 |
### ステータス表示

| パーツ名 | コントロール種 | 内容 |
| --- | --- | --- |
| サーバー状態 | アイコン＋ラベル | [● 稼働中]/[■ 停止中] |
| トンネル状態 | アイコン＋ラベル | 公開URLクリックでコピー |
| エラーバッジ | バッジ＋トースト | 詳細クリックでダイアログ表示 |

### Mockup（Flet UI設計イメージ：擬似コード）
``` python
import flet as ft

def main(page: ft.Page):
    page.title = "StreamNotifyonBluesky 設定"
    settings_form = ft.Column([
        ft.Text("Twitch Client ID:"),
        ft.TextField(label="Client ID", width=300),
        ft.Text("Bluesky Handle:"),
        ft.TextField(label="例: myuser.bsky.social", width=300),
        ft.FilledButton("保存・適用"),
        ft.FilledButton("サーバー起動/停止"),
    ])
    status_panel = ft.Row([
        ft.Icon(ft.icons.CHECK_CIRCLE, color="green"),
        ft.Text("サーバー：稼働中"),
        ft.Icon(ft.icons.LINK, color="blue"),
        ft.Text("トンネル：外部URL https://xxxx.example/")
    ])
    logs_panel = ft.ListView([
        ft.Text("2025/05/30 20:33 Twitch配信検知→通知済"),
        ft.Text("2025/05/30 19:30 YouTube新着動画→通知失敗")
    ])
    page.add(settings_form, status_panel, logs_panel)

ft.app(target=main)
```
## 2-3. 設計ドキュメントまとめ方例
1. **画面ごとの設計（各画面につき要素分解）**
    - 画面内コンテナごとの部品リスト
    - イベント・状態遷移詳細

2. **設計思想・設計理由**
    - なぜウィザード形式か
    - 各操作にどんな配慮があるか

3. **ユーザー体験の流れ**
    - 初回セットアップ〜通常運用〜障害・エラー対応

4. **可変性・拡張性**
    - 新サービス追加時のUI拡張案 など

# 1. 初回セットアップウィザード画面
## 1-1. 主なUI要素・レイアウト

| 要素名 | コントロール | プロパティ例 |
| --- | --- | --- |
| ステップ表示 | ProgressBar | value: 現在のステップ数/全体数 |
| サービス選択群 | Checkbox | label: Twitch/YouTube/Niconico, value: True/False |
| APIキー入力欄 | TextField | label, 必須入力, type=password対応あり, バリデーション |
| Blueskyアカウント入力 | TextField | label, 必須, パターン |
| 通知テンプレート編集 | TextArea | label, プレースホルダ |
| トンネル方式選択 | RadioButtons | 選択肢: Cloudflare/ngrok/localtunnel/カスタム, help_text |
| 次へ/戻る/完了ボタン | Button | enabled/disabled, on_click |
| 入力エラー表示 | Banner/Text | message, 表示切替 |
### 1-2. イベント設計

| イベント名 | 発生箇所 | 内容・アクション |
| --- | --- | --- |
| サービスチェック変更 | Checkbox | 選択サービスごとに次ページの入力欄カスタマイズ |
| 入力値変更 | 各TextField/View | 必須バリデーション、エラー表示、フォームの進行可能判定 |
| 「次へ」ボタン押下 | Button | 入力チェック、エラー時は進行不可・エラー出力 |
| 「戻る」ボタン押下 | Button | ステップを一つ戻る |
| 「完了」ボタン押下 | Button | 設定の保存、初期設定完了・メイン画面へ遷移 |
## 1-3. 詳細モック（テキスト）
``` plaintext
+-------------------------------------------------------+
| [1/5] 使用する配信サービスを選択してください           |
| [ ] Twitch   [ ] YouTube   [ ] Niconico               |
| [→ 次へ]                                            |
---------------------------------------------------------
| [n/5] Twitch APIキーを入力してください                |
|  Client ID  [__________]                              |
|  Secret     [__________]                              |
| *必須項目をすべて入力してください                     |
| [← 戻る] [→ 次へ]                                    |
---------------------------------------------------------
...
```
# 2. メイン設定・コントロール画面
## 2-1. 主なUI要素・レイアウト

| 要素名 | コントロール | プロパティ例 |
| --- | --- | --- |
| 設定エディタ | フォーム/TextField | label, type, 必須, value |
| 詳細エディタ（高度ユーザ向け） | TextArea | value, multi-line, min/max行数制限 |
| サーバー起動/停止ボタン | SwitchButton/Button | icon, 状態により色・ラベル変化 |
| トンネル起動/停止ボタン | SwitchButton/Button | 上記同様+外部URLコピーボタン |
| 設定保存・適用ボタン | Button | icon, 色, disabled状態差分 |
| 状態表示バー | Row/Column | サーバーアイコン+状態, トンネルアイコン+状態, error/okバッジ |
| 通知ログリスト | ListView | 日時、種別（サービス）、内容、結果バッジ |
| プロファイル切替 | Dropdown | 設定名, 現在選択 |
| 新規プロファイル・削除 | Button | ラベル, on_click |
| トースト通知・エラーモーダル | Banner/Dialog | メッセージ, タイプ（成功・警告・エラー）、ボタン |
## 2-2. イベント設計

| イベント名 | 発生箇所 | 内容・アクション |
| --- | --- | --- |
| 各設定値変更 | 各TextField | 変更検知・バリデーション・未保存警告 |
| 設定保存 | 保存ボタン | ファイル書込、成否トースト表示、履歴追記 |
| サーバー起動・停止 | サーバー制御ボタン | 状態切替、実行不可時は警告、実行時は状態反映 |
| トンネル起動・停止 | トンネル制御ボタン | 上記＋外部URL発行通知、コピーボタンでURLをクリップボードへ |
| プロファイル切替 | Dropdown | 設定リロード、反映 |
| 新規プロファイル作成 | ボタン | 新規設定テンプレ生成、名前入力ダイアログ表示 |
| プロファイル削除 | ボタン | 選択状態での確認ダイアログ・削除処理 |
| 通知ログ詳細表示 | ListViewの行タップ | 詳細ダイアログ、内容コピー |
| 設定反映後 | - | 成功時トースト/失敗時警告表示 |
| エラーモーダル | Banner/Dialog | エラー内容一覧、再試行/閉じるなどのボタン |
## 2-3. 詳細モック
``` plaintext
+------------------- StreamNotifyonBluesky -------------------+
|  設定エディタ    |     ステータス表示       |     ログ        | プロファイル切替   |
+------------------+-------------------------+----------------+-------------------+
| [ Twitch ClientID  ][__________]                                 |
| [ Bluesky Handle   ][__________]                                 |
| ...                                                             |
| [ 設定保存 ] [ サーバー起動/停止 ] [ トンネル起動/停止 ]         |
+---------------------------------------------------------------+
| サーバー：[● 稼働中]  トンネル：[■ 停止中] 外部URL:xxx ...      |
+--------------------+---------------------+---------------------+
| 通知ログ                                             |
| 2025/05/30 20:33 Twitch配信検知→通知済                |
| 2025/05/30 19:30 YouTube新着動画→通知失敗             |
+--------------------+---------------------+---------------------+
| プロファイル: [default ▼] [＋新規] [−削除]                   |
```
# 3. 詳細補足・ベストプラクティス
- 必須入力（`required`, `errorText`）・値フォーマット（`inputFormatters`, `validator`）で入力ミスを事前防止
- ステートフルな状態遷移管理を一元化。バックエンド設定ファイルとの同期
- クリップボード操作やトースト通知はFlet標準コントロールで即時レスポンス
- 障害や未保存状態はユーザーが見逃さないUI導線を設計


