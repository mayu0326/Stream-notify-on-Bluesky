# Stream notify on Bluesky GUI版 仕様書・設計書

---

## 1. 仕様書

### 1.1. 概要
Stream notify on BlueskyのGUI版は、コマンドラインやテキストエディタを使わずに、  
配信通知Botの設定・管理・運用を直感的なグラフィカルユーザーインターフェースで行うためのアプリケーションです。

### 1.2. 対象ユーザー
- 設定ファイル編集やコマンド操作に不慣れな一般ユーザー
- 複数の配信サービス（Twitch/YouTube/ニコニコ）を利用する配信者や管理者

### 1.3. 主な機能
- ステップバイステップの初期設定ウィザード
- ボットの起動・停止・再起動
- ボットの状態・主要連携（Twitch/YouTube/ニコニコ/Bluesky/トンネル）の監視
- 各サービスごとの通知ON/OFF・テンプレート・画像・Webhook・APIキー等の個別編集・保存
- 通知テンプレート・画像ファイルのGUI選択・カスタマイズ（各サービスごとに個別管理）
- 設定ファイル（.env等）のGUI編集・双方向連携
- ログファイル（app.log, audit.log, post_history.csv等）へのGUIアクセス
- エラーや状態の可視化（ステータス表示・アラート）
- 不要な重複UIや旧UI用メソッドの整理

### 1.4. 前提条件
- Python（バージョン指定）
- 必要な依存パッケージ（Tkinter等のGUIフレームワーク、requests、python-dotenv等）
- cloudflared等の外部ツール（必要に応じて）

---

## 2. 設計書

### 2.1. システム構成

- **GUIアプリケーション本体**  
  - Python製（Tkinter）
  - main.py等の既存Botロジックと連携

- **設定ファイル管理**  
  - .envファイルの読み書き
  - テンプレートファイル・画像ファイルの選択・保存（各サービスごとに個別パス管理）

- **プロセス管理**  
  - Bot本体（main.py等）のサブプロセス起動・停止・監視

- **ログ管理**  
  - ログファイルの閲覧・エラー通知

### 2.2. 画面設計

#### 2.2.1. 初期設定ウィザード
- ステップ1: Twitch/YouTube/ニコニコ/Blueskyのアカウント・APIキー入力
- ステップ2: 各サービスごとの通知ON/OFFやテンプレート・画像ファイル選択
- ステップ3: 設定内容の確認・保存

#### 2.2.2. メインウィンドウ
- ボットの起動・停止・再起動ボタン
- 現在の状態表示（Twitch/YouTube/ニコニコ/Bluesky/トンネルの接続状況・エラー等）
- 設定編集ボタン
- 各サービスごとのテンプレート・画像カスタマイズボタン
- ログファイル閲覧ボタン

#### 2.2.3. 設定エディタ
- .envファイルの主要項目をフォーム形式で編集
- 保存・キャンセルボタン

#### 2.2.4. テンプレート・画像選択ダイアログ
- ファイルダイアログでテンプレート・画像を選択（各サービスごとに個別）
- プレビュー表示

#### 2.2.5. ログビューア
- app.log, audit.log, post_history.csv等の内容をGUIで閲覧

### 2.3. 機能設計

- 設定値のバリデーション（必須項目・形式チェック）
- サブプロセスとしてBot本体を起動し、標準出力・エラーをGUIでキャプチャ
- 設定変更時はBotを自動再起動（または手動再起動ボタン）
- エラー発生時はダイアログやステータスバーで通知
- 各サービスごとにBluesky投稿テンプレートを個別に切り替え、投稿機能側も個別テンプレートを参照
- テンプレートパス未設定・ファイル未存在時はエラーハンドリング（エラーログ＋Discord通知＋投稿中止）

### 2.4. セキュリティ設計

- パスワードやシークレットは入力欄でマスク表示
- 設定ファイル・ログファイルの権限管理
- シークレット値やAPIキーはGUI・ログで平文表示しない

### 2.5. 拡張性

- 新たな配信サービスや通知先の追加に備えた設計
- テンプレート変数の拡張やカスタマイズ性の確保
- 今後のテンプレート仕様拡張やUI/UX改善にも柔軟に対応

---

## 3. 補足

- 画面レイアウトやクラス設計は、Tkinterベースで分割実装（app_gui.py, notification_customization_frame.py, 各Frame等）
- 実装時はユーザビリティ・アクセシビリティにも配慮すること
- READMEやマニュアルも現状仕様に合わせて随時更新

---