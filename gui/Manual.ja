ユーザーマニュアル：Stream notify on Bluesky - GUI版

1. はじめに
Stream notify on Blueskyボット GUI版へようこそ！

このグラフィカルユーザーインターフェース（GUI）は、
特にテキストエディタで直接設定ファイルを編集することに慣れていないユーザーにとって、ボットの設定と管理を容易にするために設計されています。
GUIを使用すると、次のことが可能になります：

- ステップバイステップのウィザードを通じてボットの初期設定を実行できます。
- ボットを開始・停止・再起動できます。
- ボットのステータスと主要な連携（Twitch/YouTube/ニコニコ/Bluesky/トンネル）を監視できます。
- 各サービスごとに通知ON/OFFやテンプレート・画像・Webhook・APIキー等を個別に編集・保存できます。
- 独自のテンプレートを選択して、通知メッセージをカスタマイズできます。
- 画像ファイルを選択して、各サービスの通知に画像を添付できます。
- 初期設定後もコア設定を簡単に編集できます。
- クリックで重要なログファイルにアクセスできます。

このマニュアルでは、GUIアプリケーションのインストール、設定、および使用方法について説明します。

対象読者: このマニュアルは、設定と管理にGUIの使用を希望するStream notify on Blueskyボットのエンドユーザーを対象としています。

2. 前提条件
GUIアプリケーションを使用する前に、以下のソフトウェアとファイルが設定されていることを確認してください。

ソフトウェア:

- Python: バージョン3.10以降を推奨します。
- Cloudflare Tunnelクライアント (cloudflared.exe): ボットがTwitchからWebhook通知を受信するために必要です。
- cloudflared.exeをシステムのPATH環境変数の一部であるディレクトリに配置することを強くお勧めします。
- ローカルマシンを指すように設定されたCloudflareトンネルも必要です。

アプリケーションファイル:

- ボット用のすべてのアプリケーションファイル（すべてのPythonスクリプトとサポートファイルを含む）が必要です。
- templates/ ディレクトリ（各サービス用テンプレートを格納）
- images/ ディレクトリ（noimage.png等のデフォルト画像）
- settings.env.example（設定ファイルの例。GUIがsettings.envファイルの作成を支援します）

3. 利用開始：初回セットアップ
アプリケーションを初めて実行する場合、またはsettings.env設定ファイルが存在しないか不完全な場合、GUIは自動的に初期セットアップウィザードを案内します。

アプリケーションの起動：

- すべてのアプリケーションファイルがあるフォルダに移動します。
- このフォルダでコマンドプロンプトまたはターミナルウィンドウを開きます。
- Pythonを使用してGUIアプリケーションを実行します：
  python app_gui.py

初期セットアップウィザード (SetupWizard):

- Twitch/YouTube/ニコニコ/Blueskyのアカウント・APIキー入力
- 各サービスごとの通知ON/OFFやテンプレート・画像ファイル選択
- 設定内容の確認・保存

4. メインアプリケーションウィンドウの概要

- ボットの起動・停止・再起動ボタン
- 現在の状態表示（Twitch/YouTube/ニコニコ/Bluesky/トンネルの接続状況・エラー等）
- 設定編集ボタン
- 各サービスごとのテンプレート・画像カスタマイズボタン
- ログファイル閲覧ボタン

5. 通知のカスタマイズ (NotificationCustomizationFrame)

- 各サービスごとに通知ON/OFFやテンプレート・画像・Webhook・APIキー等を個別に編集・保存可能
- テンプレート・画像ファイルはファイルダイアログから選択し、アプリケーションのtemplates/imagesディレクトリにコピーされ、settings.envにパスが保存されます
- テンプレート変数（{title}、{username}、{url}、{category}など）はREADME参照

6. セットアップ後の設定編集 (SettingsEditorDialog)

- メインウィンドウの「設定編集」から、APIキーやWebhook等のコア設定を編集可能
- 編集内容はsettings.envに即時反映
- 変更内容によってはボットの再起動が必要

7. ボットの制御

- 「起動」「停止」「再起動」ボタンでBotプロセスを管理
- ステータス表示で各サービスの接続状況やエラーを確認可能

8. ログファイルへのアクセス

- app.log, audit.log, post_history.csv等のログファイルをGUIから直接開ける
- 問題発生時はまずログを確認

9. エラーハンドリング・注意事項

- テンプレートパス未設定・ファイル未存在時はエラーログ＋Discord通知＋投稿中止
- 設定ファイルやAPIキーの管理には十分注意
- 主要なエラーや状態はGUI上でアラート表示

10. 拡張性・今後の予定

- 各サービスごとのテンプレート・画像・Webhook・APIキー等の個別管理に対応
- 今後のテンプレート仕様拡張やUI/UX改善にも柔軟に対応

