
ユーザーマニュアル：Stream notify on Bluesky - GUI版

1. はじめに
Stream notify on Blueskyボット GUI版へようこそ！

このグラフィカルユーザーインターフェース（GUI）は、
特にテキストエディタで直接設定ファイルを編集することに慣れていないユーザーにとって、ボットの設定と管理を容易にするために設計されています。
GUIを使用すると、次のことが可能になります：

ステップバイステップのウィザードを通じてボットの初期設定を実行できます。
ボットを開始および停止できます。
ボットのステータスと主要な連携（Twitch、Bluesky、トンネル）を監視できます。
独自のテンプレートを選択して、通知メッセージをカスタマイズできます。
画像ファイルを選択して、オンライン通知に画像を添付できます。
初期設定後もコア設定を簡単に編集できます。
簡単なクリックで重要なログファイルにアクセスできます。
このマニュアルでは、GUIアプリケーションのインストール、設定、および使用方法について説明します。

対象読者: このマニュアルは、設定と管理にGUIの使用を希望するStream notify on Blueskyボットのエンドユーザーを対象としています。

2. 前提条件
GUIアプリケーションを使用する前に、以下のソフトウェアとファイルが設定されていることを確認してください。

ソフトウェア:

Python: バージョン3.10以降を推奨します。
Pythonがインストールされていない場合は、python.orgからダウンロードできます。
インストール中に、「Add Python to PATH」というチェックボックスを必ずオンにしてください。

Cloudflare Tunnelクライアント (cloudflared.exe): ボットがTwitchからWebhook通知を受信するために必要です。
Cloudflare Zero Trustダッシュボードからcloudflared.exeをダウンロードしてください
（通常、「Connectors」セクションの「Downloads」を探すか、Cloudflareのウェブサイトで「cloudflared download」を検索してください）。
cloudflared.exeをシステムのPATH環境変数の一部であるディレクトリに配置することを強くお勧めします。
あるいは、GUI設定で「トンネルコマンド」を設定する際に、cloudflared.exeへのフルパスを提供する必要があります。
また、ローカルマシンを指すように設定されたCloudflareトンネルも必要です
（この設定は、このボットのGUIでトンネルコマンドを入力する前に、Cloudflareダッシュボードとcloudflaredコマンドラインを介して行います）。

アプリケーションファイル:
ボット用のすべてのアプリケーションファイル（すべてのPythonスクリプトとサポートファイルを含む）が必要です。
これらには通常、以下が含まれます：

GUIスクリプト:
app_gui.py （実行するメインGUIアプリケーション）
setup_wizard.py
main_control_frame.py
settings_editor_dialog.py
notification_customization_frame.py
コアボットロジックスクリプト:
main.py
utils.py
bluesky.py
eventsub.py
tunnel.py
logging_config.py
version.py
サポートファイルとディレクトリ:
templates/ ディレクトリ：
default_template.txt （オンライン通知用のデフォルトテンプレート）
offline_template.txt （オフライン通知用のデフォルトテンプレート）
images/ ディレクトリ：
noimage.png （画像が選択されていない場合、または選択された画像が見つからない場合のデフォルト画像）
settings.env.example （設定ファイルの例。GUIが実際のsettings.envファイルの作成を支援します）。
これらのすべてのファイルが同じメインアプリケーションフォルダにまとめて保管されていることを確認してください。

3. 利用開始：初回セットアップ
アプリケーションを初めて実行する場合、またはsettings.env設定ファイルが存在しないか不完全な場合、GUIは自動的に初期セットアップウィザードを案内します。

アプリケーションの起動：

すべてのアプリケーションファイルがあるフォルダに移動します。
このフォルダでコマンドプロンプトまたはターミナルウィンドウを開きます。
Pythonを使用してGUIアプリケーションを実行します：
python app_gui.py
（app_gui.pyがメインの実行ファイル名でない場合は、提供された正しい名前を使用してください）。
初期セットアップウィザード (SetupWizard):

ウィザードは、必要な情報を尋ねる一連の画面（ステップ）として表示されます。

ステップ1：ようこそ

内容： ウィザードがボットの設定を支援することを説明する簡単なウェルカムメッセージ。
アクション： 「次へ」ボタンをクリックして続行します。
ステップ2：Twitch設定

目的： Twitchアカウントへの接続と監視したいチャンネルを設定します。
フィールド：
TwitchクライアントID： 
TwitchアプリケーションのクライアントIDを入力します。これはTwitchデベロッパーコンソールから取得できます。（必須）

Twitchクライアントシークレット： 
Twitchアプリケーションのクライアントシークレットを入力します。これもTwitchデベロッパーコンソールにあります。（必須）

TwitchブロードキャスターID/ユーザー名： 
通知したい配信者のTwitchユーザー名または数値のユーザーIDを入力します。
ユーザー名を提供した場合、ボットは起動時に自動的にユーザーIDに変換しようとします。（必須）

ナビゲーション：
「前へ」をクリックするとウェルカム画面に戻ります。
詳細を入力した後、「次へ」をクリックして続行します。すべての必須フィールドを入力する必要があります。

ステップ3：Bluesky設定
目的： 通知が投稿されるBlueskyアカウントへの接続を設定します。
フィールド：
Blueskyユーザー名： 完全なBlueskyハンドル（例：yourname.bsky.social）。（必須）
Blueskyアプリパスワード： 
Blueskyアカウント設定から生成されたアプリパスワード。メインのBlueskyパスワードは使用しないでください。 
Blueskyの 設定 -> 詳細 -> アプリパスワード でアプリパスワードを生成できます。（必須）

ナビゲーション：
「前へ」をクリックするとTwitch設定に戻ります。
「次へ」をクリックして続行します。

ステップ4：Webhookとトンネル設定

目的： ボットがTwitchからライブ通知を受信する方法を設定します。
これには通常、Cloudflare Tunnelのようなトンネルサービスが含まれます。

フィールド：
WebhookコールバックURL： 
Twitchが通知を送信する公開URLです。Cloudflare Tunnelを使用している場合、
https://your-tunnel-subdomain.cfargotunnel.com/webhookのような形式になるか、トンネル用に設定したカスタムドメインになります。（必須）

トンネルコマンド（オプション）： ボットにトンネル（例：cloudflared）を自動的に起動させたい場合は、ここに完全なコマンドを入力します。
cloudflaredの例：C:\path o\cloudflared.exe tunnel --config C:\path o\your\config.yml run <your-tunnel-name>
トンネルを外部で管理している場合（例：常時実行している、または手動で起動する）、このフィールドは空白のままにできます。

ナビゲーション：
「前へ」をクリックするとBluesky設定に戻ります。
「次へ」をクリックして続行します。

ステップ5：コア通知トグル

目的： どの通知をアクティブにするかの初期設定を行います。
フィールド：
ストリームオンライン時に通知： ストリームがライブになったときにBlueskyに投稿を送信する場合は、このボックスをオンにします。（デフォルト：有効）
ストリームオフライン時に通知： ストリームがオフラインになったときにBlueskyに投稿を送信する場合は、このボックスをオンにします。（デフォルト：無効）

注意： これらの通知に使用される実際のテンプレートファイルと画像は、
最初はデフォルト（templates/default_template.txt、images/noimage.pngなど）に設定されます。
この初期セットアップ完了後、メインアプリケーションウィンドウからこれらを詳細にカスタマイズできます。

ナビゲーション：
「前へ」をクリックするとWebhookとトンネル設定に戻ります。
「次へ」をクリックして続行します。

ステップ6：概要と保存

内容： 入力した設定の概要がこの画面に表示されます（パスワードはマスクされます）。
これらを注意深く確認してください。

ナビゲーション：
表示された設定を変更する必要がある場合は、「前へ」をクリックします。
「設定を保存」ボタンをクリックして設定を保存します。
これにより、アプリケーションフォルダにsettings.envというファイルが作成または更新され、提供したすべての情報が書き込まれます。

完了： 保存後、ウィザードは閉じ、メインアプリケーションウィンドウが表示されるはずです。
保存に問題があった場合は、エラーメッセージが表示されます。

初期セットアップウィザードが完了すると、アプリケーションは設定を保存し、
通常、settings.envファイルが削除されたり破損したりしない限り、再度ウィザードを実行する必要はありません。
これらの設定は、後でメインアプリケーションウィンドウから編集できます。

4. メインアプリケーションウィンドウの概要
初期セットアップを完了した後（またはセットアップが既に完了していた場合）、メインアプリケーションウィンドウが表示されます。
ここは、ボットの制御、ステータス監視、およびさらなるカスタマイズオプションへのアクセスのための中央ハブとなります。

メインウィンドウは直感的に操作できるように設計されています。
以下に、その主要なセクションの概要を示します（MainControlFrameおよびapp_gui.pyの構造に基づいています）：

A. ボットコントロールセクション：

このエリアでは、ボットの動作状態を管理できます。

ボット起動ボタン：
このボタンをクリックすると、ボットが初期化され起動します。
ボットはTwitch、Blueskyへの接続を試み、トンネルを開始し（設定されている場合）、ストリームイベントの待機を開始します。
クリックされると、通常このボタンは無効になり、「ボット停止」ボタンが有効になります。
ボット停止ボタン：
このボタンをクリックすると、ボットが正常にシャットダウンします。
これにより、Webhookサーバーが停止し、トンネルプロセスが終了し（ボットによって開始された場合）、その他のクリーンアップが実行されます。
クリックされると、通常このボタンは無効になり、「ボット起動」ボタンが有効になります。
ボット再起動ボタン：
このボタンをクリックすると、まずボットを停止し（実行中の場合）、その後すぐに再度起動します。これは、完全な再起動が必要な設定変更を行った場合に便利です。
B. ステータス表示セクション：

このセクションでは、ボットの動作ステータスと、さまざまなサービスへの接続に関するリアルタイムのフィードバックを提供します。

ボットステータス：
ボットの全体的な状態を表示します。一般的なステータスには以下が含まれます：
停止中 (Stopped)：ボットは実行されていません。
起動中... (Starting...)：ボットは初期化処理中です。
実行中 (Running)：ボットはアクティブで、ストリームイベントを監視しています。
停止処理中... (Stopping...)：ボットはシャットダウン処理中です。
エラー：[メッセージ] (Error: [message])：エラーが発生しました。詳細についてはログを確認してください。
メッセージからエラーの原因が推測できる場合があります。

ステータス表示の文字色が変わることがあります（例：実行中は緑、停止中/エラー時は赤）ので、視覚的に素早く状況を把握できます。
Twitchステータス：
Twitchサービスへの接続状況（例：EventSubサブスクリプション、APIトークンの有効性）を示します。
例：接続済み (Connected)、切断 (Disconnected)、トークンエラー (Token Error)。
Blueskyステータス：
Blueskyへの接続状況（例：ログインステータス）を示します。
例：準備完了 (Ready)、ログインエラー (Login Error)。
トンネルステータス：
Webhookトンネル（例：Cloudflare Tunnel）の状況を示します。
例：アクティブ (Active)、非アクティブ (Inactive)、エラー (Error)。
C. 他の機能へのアクセス（タブまたはメニュー経由）：

メインウィンドウは、他の重要な機能へのエントリポイントとしても機能し、これらは通常タブに整理されているか、メニューバーからアクセスできます。

通知カスタマイズタブ/セクション (NotificationCustomizationFrame):
ここで、Blueskyへの投稿に使用されるテンプレートや、オンライン通知に添付される画像を編集できます。
（詳細はセクション5：通知のカスタマイズを参照）。
ログファイルセクション：
このセクションには、ボットのログファイルを直接開くためのボタンがあります。
（詳細はセクション8：ログファイルへのアクセスを参照）。
ファイルメニュー（ウィンドウ上部）：
ファイル -> 設定の編集：
「設定エディタ」ダイアログを開き、初期セットアップ中に行った設定（APIキー、URLなど）を変更できます。
（詳細はセクション6：セットアップ後の設定編集を参照）。
ファイル -> 終了：
GUIアプリケーションを閉じます。ボットが実行中の場合は、終了する前に正常に停止しようとします。
このメインウィンドウは、Twitch通知ボットの日々の運用と管理に必要なすべての基本的なツールを提供します。

5. 通知のカスタマイズ (NotificationCustomizationFrame)
GUIは、Blueskyに投稿される通知の外観と内容を簡単にカスタマイズする方法を提供します。
これは通常、メインアプリケーションウィンドウ内の専用の「通知カスタマイズ」タブまたはセクションで行われます。

これらの機能の使用方法は次のとおりです：

通知カスタマイズへのアクセス：

メインアプリケーションウィンドウで「通知カスタマイズ」（または同様のラベル）というタブまたはセクションを探してください。
A. オンライン通知設定：

このセクションでは、ストリームがライブになったときの通知を制御できます。

オンライン通知の有効化/無効化：

UI要素： 「ストリームオンライン時に通知」（または同様のラベル）というチェックボックス。
アクション： 監視対象のTwitchチャンネルがライブになったときに通知を有効にするには、このボックスをオンにします。
無効にするにはオフにします。変更は通常自動的に保存されます。

オンライン通知テンプレートの変更：

現在のテンプレート表示： オンライン通知に現在アクティブなテンプレートファイルのパス（例：templates/default_template.txt）を示すラベル。
UI要素： 「オンラインテンプレートを変更...」（または同様のラベル）というボタン。
アクション：
このボタンをクリックするとファイルダイアログが開き、コンピュータから.txtファイルを参照できます。
オンライン通知の新しいテンプレートとして使用したいテキストファイルを選択します。

ファイル処理： 選択すると、アプリケーションは次の処理を行います：
選択したテンプレートファイルをアプリケーションのtemplates/サブディレクトリにコピーします。
競合を避け、元のファイルを保持するために、名前が変更される場合があります（例：user_online_template_<timestamp>.txt）。
この新しいテンプレートパスを指すようにsettings.envファイルを更新します。

GUIの「現在のテンプレート表示」ラベルが更新され、新しくアクティブになったテンプレートのパスが表示されます。
テンプレート変数に関する注意： 
テンプレートファイルで使用できる変数（{title}、{username}、{url}、{category}など）のリストについては、
ボットのメインREADMEまたはドキュメントを参照してください。これにより、ストリーム固有の情報が自動的に挿入されます。

オンライン通知用画像の変更：

現在の画像表示： オンライン通知に現在使用されている画像のパス（例：images/noimage.png）を示すラベル。
一部のGUIでは、画像の小さなプレビューも表示される場合があります。

UI要素： 「画像を変更...」（または同様のラベル）というボタン。

アクション：
このボタンをクリックするとファイルダイアログが開き、画像ファイル（通常はPNG、JPG、または静止GIF）を参照できます。
オンラインストリーム通知に添付したい画像ファイルを選択します。

ファイル処理： 選択すると、アプリケーションは次の処理を行います：
選択した画像ファイルをアプリケーションのimages/サブディレクトリにコピーします。
一意性を確保するために名前が変更される場合があります（例：user_online_image_<timestamp>.png）。
この新しい画像パスを指すようにsettings.envファイルを更新します。
「現在の画像表示」ラベル（およびプレビュー）が更新されます。

UI要素： 「画像をクリア」（または同様のラベル）というボタン。
アクション： これをクリックすると、画像パスがデフォルト（例：images/noimage.png）または空の値にリセットされ、
カスタム画像（またはデフォルトの「画像なし」画像）は送信されなくなります。settings.envファイルはそれに応じて更新されます。

B. オフライン通知設定：

このセクションでは、ストリームがオフラインになったときの通知を制御できます。

オフライン通知の有効化/無効化：

UI要素： 「ストリームオフライン時に通知」（または同様のラベル）というチェックボックス。
アクション： 監視対象のTwitchチャンネルがオフラインになったときに通知を有効にするには、このボックスをオンにします。
無効にするにはオフにします。変更は通常自動的に保存されます。

オフライン通知テンプレートの変更：

現在のテンプレート表示： オフライン通知に現在アクティブなテンプレートファイルのパス（例：templates/offline_template.txt）を示すラベル。
UI要素： 「オフラインテンプレートを変更...」（または同様のラベル）というボタン。

アクション：
これはオンラインテンプレートの変更と同様に機能します。.txtファイルを選択します。
ファイル処理： アプリケーションはそれをtemplates/ディレクトリにコピーし（例：user_offline_template_<timestamp>.txt）、settings.envを更新します。
表示ラベルが更新されます。
ファイル処理に関する重要な注意：

GUIは、選択したテンプレートファイルと画像ファイルのコピーを、自身のtemplates/およびimages/フォルダ内で管理するように設計されています。
これにより、元のコピーを移動または削除しても、ボットが必要なファイルに常にアクセスできるようになります。
新しいファイルを選択すると、アプリケーションはその設定を更新して、新しくコピーされたファイルを使用するようにします。
アプリケーションが自身のtemplates/およびimages/サブディレクトリへの書き込み権限を持っていることを確認してください。
これらのカスタマイズオプションを使用することで、ボットのBluesky投稿を自分のスタイルや情報設定に合わせて調整できます。

6. セットアップ後の設定編集 (SettingsEditorDialog)
初期セットアップ完了後、APIキー、ユーザーID、URLなどのコア設定を変更する必要が生じることがあります。
GUIは、この目的のために「設定エディタ」ダイアログを提供しています。

設定エディタへのアクセス：

メインアプリケーションウィンドウの上部にある「ファイル」メニューを探します。
「ファイル」をクリックし、次に「設定の編集」（または同様の名前のオプション）を選択します。
これにより、「設定エディタ」ダイアログウィンドウが開きます。
このウィンドウは通常モーダルであり、メインアプリケーションウィンドウを再度使用する前に、このダイアログを操作（保存またはキャンセル）する必要があります。
設定エディタダイアログの使用方法：

設定エディタダイアログは、初期セットアップウィザードの一部の構造と非常によく似ており、さまざまな設定の入力フィールドが表示されます。

設定の読み込み： ダイアログが開くと、settings.envファイルから現在の設定が自動的に読み込まれ、それぞれのフィールドに入力されます。

編集可能なフィールド： ダイアログは通常、以下のセクションに整理されています：

Twitch設定：
TwitchクライアントID
Twitchクライアントシークレット（セキュリティのためアスタリスク****で表示）
TwitchブロードキャスターID/ユーザー名
Bluesky設定：
Blueskyユーザー名
Blueskyアプリパスワード（アスタリスク****で表示）
Webhookとトンネル設定：
WebhookコールバックURL
トンネルコマンド（ボットでトンネルを管理する場合）

変更の実施：

任意のフィールドをクリックして入力し、目的の変更を行います。
パスワードフィールドはマスクされていますが、新しいパスワードを直接入力できます。

変更の保存：

変更内容に満足したら、「保存」ボタン（または「適用」/「OK」）をクリックします。
アプリケーションは入力を検証します（例：必須フィールドが空でないか確認）。
検証が通れば、新しい設定がsettings.envファイルに書き込まれ、それらの特定の設定の以前の値が上書きされます。
確認メッセージ（例：「設定が正常に保存されました！」）が表示され、ダイアログが閉じます。
重要： 変更された設定（例：APIキー、トンネルコマンド）によっては、これらの変更を完全に有効にするためにボットの再起動が必要になる場合があります。
アプリケーションは、再起動が推奨される場合にプロンプトを表示することがあります。
変更のキャンセル：

行った変更を保存せずにダイアログを閉じたい場合は、「キャンセル」ボタンをクリックします。
ダイアログが閉じ、settings.envファイルは変更されないままになります。
設定を編集するタイミング：

TwitchまたはBlueskyのAPIキーまたはアプリパスワードが変更されたか期限切れになった場合。
別のTwitchチャンネルを監視したい場合。
WebhookコールバックURLが変更された場合（例：トンネルのサブドメインが変更された場合）。
トンネルを開始するために使用するコマンドを更新する必要がある場合。
特にボットが接続エラーに遭遇した場合など、定期的にこれらの設定を確認することは、有用なトラブルシューティングステップとなり得ます。

7. ボットの制御
メインアプリケーションウィンドウの「ボットコントロール」セクションは、ボットの操作を管理するための主要なインターフェースを提供します。

ボット起動ボタン：

アクション： このボタンをクリックしてボットを開始します。
プロセス：
GUIはバックエンドに起動シーケンスを開始するよう信号を送ります。
「ボットステータス」は通常「起動中...」に変わります。
ボットは必要な初期化（設定の検証、TwitchおよびBlueskyへの接続、Webhookトンネルの開始（設定されている場合）、Twitchイベントへのサブスクライブ）を実行します。
すべてのステップが成功すると、「ボットステータス」は「実行中」（多くの場合、緑色のインジケータと共に）に変わり、
他のステータスフィールド（Twitch、Bluesky、トンネル）もアクティブな状態を反映するはずです。
「ボット起動」ボタンは無効になり、「ボット停止」/「ボット再起動」ボタンが有効になります。
起動に失敗した場合： 「ボットステータス」に「エラー」メッセージが表示されます。詳細はアプリケーションログを確認してください（セクション8参照）。
ボット停止ボタン：

アクション： このボタンをクリックしてボットをシャットダウンします。
プロセス：
GUIはバックエンドにシャットダウンシーケンスを開始するよう信号を送ります。
「ボットステータス」は「停止処理中...」に変わります。
ボットはWebhookサーバーを停止し、Twitchイベントのサブスクライブを解除し（該当する場合）、トンネルプロセスを終了します（ボットによって開始された場合）。
シャットダウンが完了すると、「ボットステータス」は「停止中」（多くの場合、赤色のインジケータと共に）に変わります。
「ボット停止」および「ボット再起動」ボタンは無効になり、「ボット起動」ボタンが有効になります。
ボット再起動ボタン：

アクション： このボタンをクリックすると、停止シーケンスの後にすぐに開始シーケンスが実行されます。
プロセス： これは「ボット停止」をクリックしてから「ボット起動」をクリックするのと同じです。
使用例： 完全なボットの再起動が必要な設定変更を行った場合や、ボットが応答しない状態にあると思われる場合に便利です。
これらの操作に関するフィードバックについては、常に「ボットステータス」表示を確認してください。

8. ログファイルへのアクセス
ボットは、その活動を理解したり、問題を診断したり、単に履歴を確認したりするのに非常に役立ついくつかのログファイルを保持しています。
GUIは、システムのデフォルトアプリケーション（テキストファイルまたはCSVファイル用）を使用してこれらのファイルを直接開くためのボタンを提供します。

ログアクセスボタンの場所：

メインアプリケーションウィンドウで、「ログファイル」（または同様のラベル）というセクションまたは一連のボタンを探してください。
これはメインコントロールビューの一部であるか、別のタブ/ユーティリティセクションにある場合があります。
利用可能なログファイルとその開き方：

アプリケーションログ (app.log):

内容： これは主要な運用ログです。ボットの起動、ストリームステータスの確認時、発生したエラー（例：API接続の問題、Blueskyへの投稿の問題）、
および一般的なアクティビティに関する詳細情報が記録されます。ボットが期待どおりに動作しない場合に、通常最初に確認する場所です。
開き方： 「アプリケーションログを表示」（または同様のラベル）というボタンをクリックします。
監査ログ (audit.log):

内容： このログには、EventSubサブスクリプションが作成または削除されたときや、WEBHOOK_SECRETがローテーションされたときなど、
セキュリティ上重要またはクリティカルな操作が記録されます。
開き方： 「監査ログを表示」（または同様のラベル）というボタンをクリックします。
投稿履歴 (post_history.csv):

内容： このファイルには、ボットがBlueskyに送信しようとしたすべての通知の履歴が記録されます。
これはCSV（カンマ区切り値）ファイルであり、スプレッドシートプログラム（Excel、LibreOffice Calc、Google Sheetsなど）で表示するのが最適です。
通常、以下の情報が含まれます：

投稿試行の日時。
イベントタイプ（例：「online」、「offline」）。
ストリームタイトル。
ストリームカテゴリ。
ストリーム/投稿のURL。
成功ステータス（Blueskyへの投稿が成功したか失敗したか）。
開き方： 「投稿履歴を表示」（または同様のラベル）というボタンをクリックします。
ログボタンをクリックしたときの動作：

アプリケーションは、選択したログファイルを、Windowsシステムが.logファイル（通常はメモ帳などのテキストエディタ）または
.csvファイル（通常はスプレッドシートプログラム）に関連付けているデフォルトのプログラムを使用して開こうとします。

ログファイルが存在しない場合：
ボットが特定のログを生成するのに十分な時間実行されていない場合、またはログファイルが削除された場合、ファイルが存在しない可能性があります。
この場合、GUIは「ファイルが見つかりません：ログファイル app.log は見つかりませんでした。」のようなポップアップメッセージを表示します。

ログの使用：
トラブルシューティングの際は、問題が発生した時刻頃のapp.logでエラーメッセージを確認してください。
post_history.csvは、特定の通知が正常に送信されたかどうかを確認するのに役立ちます。
audit.logは通常、より高度なチェックや重要なコンポーネントへの変更を理解するために使用します。
GUIからこれらのログに簡単にアクセスできることで、ボットの監視とトラブルシューティングのプロセスを大幅にスピードアップできます。

9. 基本的なトラブルシューティング
GUIを使用していても、時折問題が発生することがあります。
このセクションでは、主にGUIアプリケーション内で利用可能な情報とツールを使用して、いくつかの一般的な問題を診断し解決するためのヒントを提供します。

問題：ボットが起動しない、またはすぐに「エラー」ステータスが表示される。

ログの確認：
GUIの「アプリケーションログを表示」ボタンを使用してapp.logを開きます。
ファイルの最後にエラーメッセージがないか確認してください。
これらはしばしば、起動失敗の具体的な理由（例：無効なAPIキー、ネットワークの問題、settings.envの問題）を提供します。

設定の確認：
設定エディタ（ファイル -> 設定の編集）を開きます。
すべてのAPIキー、シークレット、ユーザー名、URLを再確認してください。小さなタイプミスがボットの接続を妨げることがあります。
TWITCH_BROADCASTER_IDが監視したいチャンネルに対して正しいことを確認してください。
WEBHOOK_CALLBACK_URLが正しく入力され、アクセス可能であることを確認してください。

前提条件：
Pythonが正しくインストールされていることを確認してください。
ボットでトンネルを管理する場合は、cloudflared.exeがアクセス可能であり、TUNNEL_CMDが正しいことを確認してください。
コマンドプロンプトでTUNNEL_CMDを手動で実行してみて、動作するか確認してください。

問題：ボットは「実行中」だが、Blueskyに通知が投稿されない。

ボットステータス表示の確認：
メインGUIウィンドウの「Twitchステータス」、「Blueskyステータス」、「トンネルステータス」を確認してください。
これらのいずれかにエラーがある場合（例：「Twitchトークンエラー」、「Blueskyログインエラー」、「トンネル非アクティブ」）、問題の箇所が特定できます。

投稿履歴の確認：
「投稿履歴を表示」ボタンを使用してpost_history.csvを開きます。
最近のエントリを確認してください。「成功」列を見れば、投稿が失敗しているかどうかがわかります。
失敗している場合は、他の列がコンテキストを提供するかもしれません。

アプリケーションログの確認：
app.logには、失敗した投稿試行に関するより詳細なエラーメッセージ（例：Blueskyからの特定のAPIエラーレスポンス）が含まれている可能性があります。

Blueskyアカウント：
Blueskyアカウントがロックされたり制限されたりしていないことを確認してください。
Blueskyアプリパスワードがまだ有効であることを確認してください。
通知テンプレート/画像：
最近テンプレートや画像を編集した場合、ファイルが有効で、templates/およびimages/フォルダ内でアクセス可能であることを確認してください。
テンプレートのエラー（例：存在しない変数の参照）は投稿失敗の原因となる可能性があります。
app.logがテンプレートレンダリングエラーを示しているかもしれません。

問題：Twitchステータスにエラーが表示される、またはボットがストリームのライブ/オフラインを検出しないように見える。

Twitch設定の確認：
設定エディタで、TWITCH_CLIENT_ID、TWITCH_CLIENT_SECRET、およびTWITCH_BROADCASTER_IDを確認してください。

Webhook URLとトンネルの確認：
Twitchが通知を送信するためには、WEBHOOK_CALLBACK_URLが公にアクセス可能である必要があります。
トンネルがダウンしているか設定が間違っている場合、ボットはイベントを受信しません。
GUIで「トンネルステータス」を確認してください。
トンネルの状態については、Cloudflareのダッシュボードを参照してください。

アプリケーションログの確認：
EventSubサブスクリプションの作成またはWebhook署名検証に関連するエラーがないか確認してください。
問題：GUIに「トンネル非アクティブ」または「トンネルエラー」が表示される。

TUNNEL_CMDの確認： ボットがトンネルを開始するよう設定されている場合、
設定エディタのコマンドが正しく、cloudflared.exe（または選択したトンネルクライアント）が動作していることを確認してください。

手動確認： ターミナルでトンネルコマンドを手動で実行してみて、エラーが報告されるか確認してください。
Cloudflare設定： Cloudflareダッシュボードでトンネル自体が正しく設定され、アクティブであることを確認してください。
問題：ログを表示しようとすると「ファイルが見つかりません」と表示される。
これは単に、ボットがまだその特定のログファイル（例：投稿が試行されていない場合のpost_history.csv）を生成していないか、削除されたことを意味します。
通常、これはエラーではありません。
問題：選択したテンプレートまたは画像が使用されていない。

カスタマイズの確認： GUIの「通知カスタマイズ」セクションで、正しいテンプレート/画像パスがアクティブとして表示されていることを確認してください。
ボットの再起動： 特にパスなどの一部の変更は、完全に適用されるためにボットの再起動が必要になる場合があります（GUIはsettings.envを更新することで即時適用を目指しますが）。
不明な場合は、ボットを再起動してください。
一般的なヒント：ボットを再起動する。

設定変更を行った場合や、ボットが応答しない状態にあると思われる場合は、GUIコントロールを使用してボットを停止してから起動してみてください。
これにより、一時的な問題が解決することがよくあります。
問題が解決しない場合は、app.logの詳細なエラーメッセージがさらなる調査のための最良のリソースとなります。

