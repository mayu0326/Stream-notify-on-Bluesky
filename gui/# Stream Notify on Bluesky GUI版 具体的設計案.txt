# Stream Notify on Bluesky GUI版 具体的設計案

---

## 1. 採用技術

- **言語**: Python 3.9 以上
- **GUIフレームワーク**: Tkinter（標準）、またはPyQt5（高機能化を目指す場合）
- **プロセス管理**: subprocessモジュール
- **設定ファイル操作**: python-dotenv、標準ファイルI/O
- **ログ閲覧**: 標準テキストビューア、またはtkinter.Textウィジェット

---

## 2. 画面・機能構成

### 2.1. 初期設定ウィザード

- **画面1: サービス認証情報入力**
  - Twitch/YouTube/ニコニコ/Blueskyのユーザー名・APIキー・パスワード入力欄
  - 入力値バリデーション（空欄・形式チェック）

- **画面2: 通知設定・テンプレート選択**
  - 各サービスごとの通知ON/OFFチェックボックス
  - テンプレートファイル選択（ファイルダイアログ）
  - 画像ファイル選択（ファイルダイアログ）

- **画面3: 設定内容確認・保存**
  - 入力内容のサマリ表示
  - 「保存して次へ」ボタン

### 2.2. メインウィンドウ

- **ボット制御**
  - 「起動」「停止」「再起動」ボタン
  - 現在の稼働状態表示（ラベル・色分け）

- **ステータス表示**
  - Twitch/YouTube/ニコニコ/Bluesky/トンネルの接続状態アイコン
  - エラー発生時は赤色・アラート表示

- **設定編集**
  - 「設定を編集」ボタンで.env編集ダイアログを開く

- **テンプレート・画像カスタマイズ**
  - 「テンプレート変更」「画像変更」ボタン
  - 選択後、プレビュー表示

- **ログ閲覧**
  - 「ログを見る」ボタンでapp.log/audit.log/post_history.csvをテキストビューアで開く

### 2.3. 設定エディタ

- .envファイルの主要項目をフォームで編集
- 保存時にバリデーション
- 保存・キャンセルボタン

### 2.4. ログビューア

- ファイル選択式で各種ログを表示
- 検索・フィルタ機能（オプション）

---

## 3. クラス・モジュール設計（Tkinter例）

- `MainWindow`（tk.Tk）: メインウィンドウ全体
- `SetupWizard`（tk.Toplevel）: 初期設定ウィザード
- `SettingsEditor`（tk.Toplevel）: 設定編集ダイアログ
- `TemplateSelector`（tk.Toplevel）: テンプレート・画像選択ダイアログ
- `LogViewer`（tk.Toplevel）: ログビューア
- `BotProcessManager`: main.py等の起動・停止・監視を担当

---

## 4. プロセス管理

- サブプロセスとしてmain.pyを起動
- 標準出力・標準エラーをGUIでキャプチャし、状態表示やエラー通知に反映
- 設定変更時は自動再起動（またはユーザーに再起動を促す）

---

## 5. セキュリティ・ユーザビリティ

- パスワード・シークレットは入力欄でマスク表示
- 設定ファイル・ログファイルの権限を適切に設定
- シークレット値やAPIキーはGUIやログで平文表示しない
- 入力値のバリデーションを徹底

---

## 6. 拡張性

- サービス追加時は設定項目・テンプレート選択欄を動的に増やせる設計
- テンプレート変数の説明やプレビュー機能を追加可能

---

## 7. 画面遷移イメージ

```
[初回起動]
  ↓
[初期設定ウィザード]
  ↓
[メインウィンドウ]
  ├─[設定編集]
  ├─[テンプレート・画像変更]
  └─[ログ閲覧]
```

---

## 8. 実装のポイント

- まずはTkinterで最小限の機能（設定ウィザード、起動/停止、ステータス表示）から着手
- 機能追加やUI強化が必要になったらPyQt5等への移行も検討
- 既存のmain.pyや設定ファイル操作ロジックを流用し、GUIから呼び出す形で実装

---