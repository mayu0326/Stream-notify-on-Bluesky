# Stream notify on Bluesky GUI版 具体的設計案

---

## 1. 採用技術
- Python 3.10+
- GUI: tkinter + ttk
- 環境変数: python-dotenv
- 画像処理: Pillow
- HTTP/REST: requests (接続テスト用)
- サブプロセス管理: (未実装予定) BotProcessManager via subprocess

---

## 2. 画面構成

### 2.1 初期設定ウィザード (SetupWizard)
1. step1: Twitch/YouTube/ニコニコ/Bluesky 認証情報入力  
2. step2: 通知ON/OFF & テンプレート・画像選択  
3. step3: 設定内容のサマリ確認  
- 入力バリデーション（必須項目チェック）
- 最終保存で settings.env を生成

### 2.2 メインウィンドウ (MainWindow)
5つのタブをNotebookで管理:
  A. 設定状況 (MainControlFrame)  
     - 各サービスID/連携状態表示  
     - Bot起動/停止/再起動ボタン  
     - ConsoleOutputViewer 呼び出し  
  B. 一般設定  
     - タイムゾーン (TimeZoneSettings)  
     - トンネル起動コマンド (TunnelConnection)  
  C. アカウント設定 (AccountSettingsFrame)  
     - サブNotebookで Twitch / Webhook / Bluesky / YouTube / ニコニコ  
     - 各種認証情報編集・接続テスト  
  D. Bluesky投稿設定 (BlueskyPostSettingsFrame)  
     - NoticeFrame(Twitch/YouTube/ニコニコ)をタブ化  
     - 各種通知ON/OFF・テンプレート選択・画像選択  
  E. ログ・通知設定 (NotificationCustomizationFrame)  
     - ログレベル・保持日数 (LoggingConsoleFrame)  
     - Discord通知設定 (DiscordNotificationFrame)  
     - ログファイル閲覧 (LogViewer)

---

## 3. モジュール／クラス設計

- app_gui.py  
  - MainWindow  
- setup_wizard.py  
  - SetupWizard  
- main_control_frame.py  
  - MainControlFrame  
- account_settings_frame.py  
  - AccountSettingsFrame  
- bluesky_post_settings_frame.py  
  - BlueskyPostSettingsFrame  
- twitch_notice_frame.py / youtube_notice_frame.py / niconico_notice_frame.py  
  - TwitchNoticeFrame / YouTubeNoticeFrame / NiconicoNoticeFrame  
- notification_customization_frame.py  
  - NotificationCustomizationFrame  
- logging_console_frame.py  
  - LoggingConsoleFrame  
- discord_notification_frame.py  
  - DiscordNotificationFrame  
- log_viewer.py  
  - LogViewer  
- console_output_viewer.py  
  - ConsoleOutputViewer  
- timezone_settings.py  
  - TimeZoneSettings  
- tunnel_connection.py  
  - TunnelConnection  
- settings_editor_dialog.py  
  - SettingsEditorDialog  
- utils.py  
  - change_template_file, change_image_file  

---

## 4. 設計ポイント

1. **.env 読み書き**: python-dotenv で読み込み→Tkinter 変数へ。保存時は直接ファイルI/Oして再読み込み。  
2. **UI/UX**  
   - Entry変化で即バリデーションアイコン表示  
   - 接続テスト→ステータスラベル更新  
   - ファイル選択→プレビューサムネイル  
3. **拡張性**  
   - 新サービス追加は NoticeFrame を追加し bluesky_post_settings_frame.py に組み込むだけ  
   - NotificationCustomizationFrame の不要関数は完全移行済み  
4. **セキュリティ**  
   - シークレット項目は show="*" でマスク  
   - ログ/設定ファイルへの平文出力抑制  

---

## 5. 今後の課題
- BotProcessManager 実装／動的ログ取得  
- SetupWizard の保存処理強化  
- ユニットテスト／CI導入  
- 多言語対応  
