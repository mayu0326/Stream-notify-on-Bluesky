ユーザーマニュアル：StreamNotifyonBluesky_GUI設定エディタ

1. はじめに  
このマニュアルは、
設定と管理にGUIの使用を希望するStreamNotifyonBlueskyボットの
エンドユーザーを対象としています。

このマニュアルでは、
GUIアプリケーションのインストール、設定、および使用方法について説明します。

2. 前提条件  
  ・Python 3.10以上  
  ・依存パッケージのインストール
  ※requirements.txtまたはdevelopment-requirements.txtを利用。
  ・cloudflared.exe（Cloudflare Tunnel）やngrok等を利用する場合は実行ファイルをPATHに追加  
  ・リポジトリ直下に settings.env.example があること  

3. 初回セットアップ  
  1) コマンドプロンプトを開き、プロジェクトルートに移動  
  2) `python gui/app_gui.py` を実行  
  3) settings.env が未作成／不完全な場合、自動で SetupWizard が起動  
  4) ウィザードの手順：  
    - step1: はじめに（説明）  
    - step2: Twitchアカウント設定（クライアントID・シークレット）  
    - step3: Webhook設定（コールバックURL）  
    - step4: Blueskyアカウント設定（ユーザー名・アプリパスワード）  
    - step5: YouTubeアカウント設定（APIキー・チャンネルID）  
    - step6: ニコニコアカウント設定（ユーザーID）  
    - step7: 通知設定（Twitch/YouTube/ニコニコの通知ON/OFFを2列3行グリッドで選択）  
<<<<<<< HEAD
    - step8: トンネル通信設定（cloudflared等のコマンド）  
=======
    - step8: トンネル通信設定（cloudflared/ngrok/localtunnel/customコマンド）  
>>>>>>> development
    - step9: 最終確認（各ステップの入力状況を一覧で確認）  
    - 「スキップ」ボタンで各ステップを飛ばすことも可能  
    - 「ファイルを作成」でsettings.envに保存し、メイン画面が自動で開く

4. メインウィンドウ概要  
  アプリ起動後に表示される MainWindow は、5つのタブで構成されています。  
  ・設定状況  
<<<<<<< HEAD
  ・一般設定  
  ・アカウント設定  
  ・Bluesky投稿設定  
=======
  ・アカウント設定  
  ・Bluesky投稿設定
  ・トンネル通信設定  
>>>>>>> development
  ・ログ・通知設定  

5. 設定状況タブ   
  – Twitch/YouTube/ニコニコ/Bluesky/の設定状況の表示
  - Discord連携の設定状況の表示
  - トンネルの接続の設定状況の表示    

<<<<<<< HEAD
6. 一般設定タブ  
  – タイムゾーン設定 (TimeZoneSettings)：プリセット or カスタム入力  
  – トンネル起動コマンド (TunnelConnection)：cloudflared/ngrok等のコマンド登録  

7. アカウント設定タブ  
  Notebook内に以下のサブタブ：  
  - Twitch: クライアントID/Secret/Broadcaster ID  
  - Webhook: Discord Webhook URL & レベル設定  
=======
6. アカウント設定タブ  
  Notebook内に以下のサブタブ：  
  - Twitch: クライアントID/Secret/Broadcaster ID  
  - Webhook: TwitchWebhook関連の設定
  - WebhookURL: コールバックURL（恒久用/一時用）の設定・確認  
>>>>>>> development
  - Bluesky: ユーザー名・アプリパスワード  
  - YouTube: APIキー・チャンネルIDなど  
  - ニコニコ: ユーザーID・ポーリング間隔など  
  → 入力後「接続テスト」ボタンで認証チェック  
<<<<<<< HEAD

8. Bluesky投稿設定タブ  
  Notebook内に各サービス専用 NoticeFrame：  
  - TwitchNoticeFrame  
  - YouTubeNoticeFrame  
  - NiconicoNoticeFrame  
  各種通知ON/OFF、投稿テンプレート・画像の選択・プレビューが可能  

9. ログ・通知設定タブ  
=======
  ※Webhookタブ/WebhookURLタブは分離され、
  トンネル種別に応じてURL欄の自動切替・編集可否が制御されます。

7. Bluesky投稿設定タブ  
  Notebook内に各サービス専用 NoticeFrame：  
  - Twitch配信通知設定  
  - YouTube配信通知・動画投稿通知設定  
  - Niconico配信通知・動画投稿通知設定  
  各種通知ON/OFF、投稿テンプレート・画像の選択・プレビューが可能  
  – テンプレート・画像パスは「templates/」「images/」以降の相対パスで保存・管理  
  – ファイルダイアログから選択後、相対パスで自動保存  
  – 設定保存時は「保存完了」メッセージが表示されます  

8. トンネル通信設定  
  – cloudflared/ngrok/localtunnelの設定と個別テスト
  - customコマンドで登録すれば本GUI対応外トンネル等も利用可能 

9. ログ・通知設定タブ
  – タイムゾーン設定 (TimeZoneSettings)：プリセット or カスタム入力  
>>>>>>> development
  – ログレベル & 保持日数設定 (LoggingConsoleFrame)  
  – Discord通知設定 (DiscordNotificationFrame)  
  – ログファイルビューア (LogViewer): app.log, audit.log, post_history.csvの閲覧  

10. テンプレート・画像管理  
  – ファイルダイアログから選択後、templates/ または images/ 配下へコピー  
<<<<<<< HEAD
  – 選択したパスが settings.env に保存  
  – テンプレート内変数例: {title}, {url}, {username} など（README参照）  

11. エラーハンドリング・注意事項  
  – テンプレート未設定やファイル未存在時は投稿を中止し、エラーをログ／Discordへ通知  
=======
  – 選択したパスが settings.env に保存（相対パスで記録）  
  – テンプレート内変数例: {title}, {url}, {username} など（README参照）  

11. トンネル・Webhookの仕様  
  – Cloudflare/ngrok/localtunnel/customトンネルに対応  
  – トンネル起動・監視・URL自動反映・再接続を自動化  
  – WebhookコールバックURLは恒久用/一時用を自動切替し、GUI上で自動表示・編集可否も制御  

12. エラーハンドリング・注意事項  
  – テンプレート・画像未設定やファイル未存在時は投稿を中止し、エラーをログ／Discordへ通知  
>>>>>>> development
  – APIキー等機密情報はマスク表示  
  – 設定変更後はBot再起動が必要な場合あり
